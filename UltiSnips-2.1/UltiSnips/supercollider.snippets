
snippet mixer
* Pkey(\amp),
) <> Veco(~name).mixer)
endsnippet

snippet Splay
Splay.ar(sig, spread, amp, pan);
endsnippet

snippet ndeffreq
Ndef(~name+++${1:\lfo1}).bus.asMap,
endsnippet

snippet ndeflfo
Ndef(~name+++${1:\lfo1}),
endsnippet

snippet lfo
Ndef(~name+++${1:\lfo1}, { ${2:SinOsc.kr(1).range(50,100)}  });
endsnippet

snippet lfoset
Ndef(~name+++${1:\lfo1}).put(1, \set -> Pbind(
	${2:\freq, Pseq([1],inf),}
	\dur, 1,
));
endsnippet

snippet Pseqadsr
Pseq([
	${1:[ Env.adsr(0.1,0.1,0.8,0.1) ]},
],inf),
endsnippet

snippet Pseq
Pseq([
	${1}
],inf),
endsnippet

snippet spn
(
SynthDef(~name, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200, doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = ${1:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);
(
Pdef(~name, Pbind(
	\instrument, ~name,
	\degree, Pseq([0],inf),${2}
	\dur, 1/4,
	\amp, 0.1
))
);
endsnippet

snippet prepdn
(
if(Pdef(~name +++ \pre).source.isNil) { Pdef(~name +++ \pre, Pbind()) };
Pdef(~name, Pdef(~name +++ \pre) <> Pbind(
	\instrument, ${1:~name},
	\degree, Pseq([0],inf),
	\isRest, Veco(~name).isrest,
	\dur, 1/4,
	\amp, 0.1 * Pkey(\amp),
) <> Veco(~name).mixer)
);
endsnippet

snippet preinit
if(Pdef(~name +++ \pre).source.isNil) { Pdef(~name +++ \pre, Pbind()) };
Pdef(~name, Pdef(~name +++ \pre) <> Pbind(
endsnippet

snippet premod
Pdef(~name +++ \pre, Pbind(
	${1:\\${2:freq}, ${3:100}},
));
endsnippet

snippet sdn
(
SynthDef(~name, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200, doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);
endsnippet

snippet pdn
(
Pdef(~name, Pbind(
	\instrument, ${1:~name},
	\degree, Pseq([0],inf),
	\isRest, Veco.main.seq.pryn(~name),
	\dur, 1/4,
	\amp, 0.1
))
);
endsnippet





snippet arg
{ arg self${1};
	${0}
},
endsnippet

snippet ~class
~class_${1} = (
	new: { arg self;
		self = self.deepCopy;
	
		self;
	},
);
endsnippet

snippet new
new: { arg self;
	self = self.deepCopy;

	$1

	self;
},
endsnippet

snippet Pbind
Pbind(
	\instrument, \\${1:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1
);
endsnippet

snippet Pbindp
(
Pbind(
	\instrument, \\${1:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1
);
)
endsnippet

snippet Pdef
Pdef(\\${1:plop}, Pbind(
	\instrument, \\${2:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1
));
endsnippet

snippet Pdefp
(
Pdef(\\${1:plop}, Pbind(
	\instrument, \\${2:default},
	\degree, Pseq([0],inf),
	\dur, 1,
	\amp, 0.1
)).play;
);
endsnippet

snippet Ndefp
(
Ndef(\\${1:plop}, { arg freq=200, pan=0, amp=0.1;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = Pan2.ar(sig, pan, amp);
}).play;
);
endsnippet

snippet Mdef
(
Mdef(\\${1:plop}, Pbind(
	\instrument, \\${2:default},
	\degree, Pseq([0],inf),
	\dur, 1,
	\amp, 0.1
));
);
endsnippet

snippet SynthDef
SynthDef(\\${1:plop}, { arg out=0, amp=0.1, gate=1, pan=0, freq=200;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(Env.adsr(0.01,0.1,0.8,0.1),gate,doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
endsnippet

snippet SynthDefp
(
SynthDef(\\${1:plop}, { arg out=0, amp=0.1, gate=1, pan=0, freq=200;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(Env.adsr(0.01,0.1,0.8,0.1),gate,doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
);
endsnippet

snippet SynthDefinp
(
SynthDef(\\${1:plop}, { arg in, out=0, mix=0.5, amp=1, gate=1;
	var sigin, sig;
	sigin = In.ar(in, 2);
	sig = ${2:sigin};
	sig = SelectX.ar(mix, [sigin, sig]);
	sig = sig * EnvGen.ar(Env.asr(0.0001,1,0.0001),gate,doneAction:2);
	Out.ar(out, sig);
}).add;
)
endsnippet

snippet Instr
Instr(\\${1:plop}, { arg amp=0.1, gate=1, pan=0, freq=200;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
}).addSynthDef;
endsnippet

snippet ~class_ci
~class_ci_${1:plop} = (
	parent: ~class_instr,
	synth_rate: \ar,
	new: { arg self, main, player, namer;
		self = self.deepCopy;

		self.get_main = { main };
		self.get_player = { player };
		self.namer = { namer };
		self.synthdef_name = \ci_;
		self.build_data;

		self.simple_args = (gate:1, doneAction:2);
	
		self;
	},

	build_data: { arg self;
		var main = self.get_main;
		var player = self.get_player;
		var specs = self.get_specs;

		self.help_build_data(
			self.make_control_params([
				[\mix, \unipolar, 0.5],
			]),
			(

			),
			[
				//self.insertfxs,
			],
		);
	},

	make_layout: { arg self;
		self.layout = HLayout(
			StaticText.new.string_("void")
		);
		self.layout;
	},

	synthfun: { arg self;
		{ arg args;
			var i = self.get_synthargs(args);
			var sig;
			
			sig = SinOsc.ar(i.freq);
			sig = sig * EnvGen.ar(Env.adsr(0.01,0.1,0.8,0.1),i.gate,doneAction:i.doneAction);
			sig = Pan2.ar(sig, i.pan, i.amp);
			sig;
		}
	},

);
endsnippet

snippet specs
}, metadata:(specs:(
	duration: ControlSpec(0.001,4,\lin, 0, 1)
))).store;
endsnippet

snippet Pan
Pan2.ar(sig, pan, amp);
endsnippet

snippet EnvGen
EnvGen.ar(Env.adsr(0.1,0.1,1,0.1),gate,doneAction:2);
endsnippet

snippet Named
NamedControl.kr(\\${1:adsr}, Env.adsr(0.1,0.1,0.8,0.1))
endsnippet

snippet adsr
EnvGen.kr(\\${1:adsr}.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:doneAction);
endsnippet

snippet env
EnvGen.kr(\\${1:env}.kr(Env([1,2,1,2],[0.1,0.8,0.1].normalizeSum)), gate, timeScale:tsustain);
endsnippet
