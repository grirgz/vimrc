
#######################################################
###### coding templates

snippet Win
WindowDef(\\${1:win}, { arg def;
	$2
}).front;
endsnippet

snippet bigtitle
///////////////////// /////////////////  /////////////////  /////////////////
///////////////////
/////////////////		 	${1:SampleTimeline} 				/////////////////
///////////////
/////////////  ///////////////// ///////////////// /////////////////
endsnippet

snippet pe "" w
presetCompileString.editorInsert
endsnippet

snippet rdnpreset
ProtoDef(\\${1:rdn}).presetCompileString.editorInsert
endsnippet

snippet master
(
~master = {
	ProtoDef(\rdn).play;
};
~master.();
)
endsnippet

snippet rdntostring
~protordn_to_fbstring.(ProtoDef(\rdn2)).editorInsert
endsnippet

snippet piano
ProtoDef(\piano).startControl(Pdef(\\${1:melo}))
endsnippet

snippet apc
FileSystemProject.load("libdef/pdeftrack.scd");
FileSystemProject.load("libdef/apc.scd");
Pdef(\pdefgrid0_0, Pbind(\note, Pseq([0,1],inf), \dur, 1/8));
Pdef(\pdefgrid0_1, Pbind(\note, Pseq([3,4],inf), \dur, 1/8));
TrackDef(\pdefgrid).edit
ProtoDef(\apc40).activate(TrackDef(\pdefgrid));

ProtoDef(\apc40).map_rdn_to_bank(0, \rdn, [\delay, \delay2]);
ProtoDef(\apc40).activate_bank_selector
MKtl.find(\midi); // when was not connected
endsnippet

snippet amen
BufDef(\amen, "vipere/amenbreak.wav");
BufDef(\moeten, "voices/02_moeten.flac")
BufDef(\crepe, "field/crepe.flac");
BufDef(\oeuf, "field/oeuf.flac");
BufDef(\ukraine, "bruit1/07_ukraine.flac");
BufDef(\table, "field/table.flac");
BufDef(\scream, "vipere/scream.flac");
BufDef(\rocksteady, "vipere/rocksteady.flac");
BufDef(\metal, "vipere/metal.flac");
BufDef(\bomb, "vipere/bomb.flac");
endsnippet

snippet Pen
(
	WindowDef(\farfalle, {
		var canvas = UserView.new;
		canvas.drawFunc = {
			Pen.strokeColor = Color.red;
			Pen.fillColor = Color.blue;
			Pen.moveTo(200@100);

			Pen.lineTo(250@200);
			Pen.lineTo(300@200);
			Pen.lineTo(200@250);
			Pen.lineTo(100@200);
			Pen.lineTo(150@200);
			Pen.lineTo(200@100);

			//Pen.stroke;
			//Pen.fill;
			Pen.draw(3);
		};
		canvas.background_(Color.grey);
	}).front;
)
endsnippet

snippet Outsd
out=0, gate=1, 
sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
Out.ar(out, sig);
}).add;
endsnippet

snippet pedit
WindowDef(\PdefEditor).front(Pdef(\\${1:combkick}))
endsnippet

snippet nedit
WindowDef(\NdefEditor).front(Ndef(\\${1:combkick}))
endsnippet

snippet \add
\addAction, \addToTail,
\lag, 0.0005,
endsnippet

snippet saverdns
(
[\rdn, \rdn2, \rdn3, \rdn4].collect({ arg key;
	ProtoDef(key).presetCompileString;
}).join("\n\n").editorInsert
)
endsnippet

snippet initrdn
ProtoDef(\rdn, ProtoTemplateDef(\rdn));
ProtoDef(\rdn2, ProtoTemplateDef(\rdn));
ProtoDef(\rdn3, ProtoTemplateDef(\rdn));
ProtoDef(\rdn4, ProtoTemplateDef(\rdn));
endsnippet

snippet trackmixer
Pmono(\simpletrackmixer,
	\inbus, BusDef(\sendbus1),
	\pregain, 1,
	\postgain, 1,
	\delay, 0,
	\send0, 0,
	\sendbus0, BusDef(\sendbus0, \audio, 2),
	\dur, 1,
),
endsnippet

snippet MIDIdef
(
MIDIdef.noteOn(\track1, { arg ... args;
	args.postln;
	${1}
});
)
endsnippet

snippet fun "" w
{ arg x; $1 }
endsnippet

snippet play
Pdef(\\${1:part}).play;
endsnippet

snippet stop
PlayerWrapper(Pdef(\\${1:part})).stop;
endsnippet

snippet clear
Pdef(\\${1:part}).${2:clear};
endsnippet

snippet reset
Pdef(\\${1:part}).${2:reset};
endsnippet

snippet pmod
~pmodenv.(Pseq([${1:1},2,1,4],inf), 8),
endsnippet

snippet tempo
~t = ${1:185/4}/60; TempoClock.default.tempo = ~t;
endsnippet

snippet quant
Pdef.defaultQuant = ${1:4};
Ndef.defaultQuant = $1;
endsnippet

snippet phase
{ SinOsc.ar(200, (1..4)/4 * 2pi)}.plot;
endsnippet

snippet log
Log(\Param).debug("${1}");${4}
endsnippet

snippet sigdb
sig.debug("sig$1");$2
endsnippet

snippet playergrid
(
TrackDef(\\${1:grid1}, TrackDef(\playergrid));
TrackDef(\\$1).source = [
	[
		nil,
	],
];
);

//TrackDef(\\$1).edit;
WindowDef(\multigrid).front;
endsnippet

snippet launchpad
k = MKtl(\lp, "novation-launchpad-s");
k.elAt(\pad).elAt(0).elAt(0).action = { "0 on pushed".postln; };
k.elAt(\pad).elAt(0).elAt(1).action = { "0 off pushed".postln; };
k.postElements;
k.elAt(\pad).elAt(0).elAt(0).value = 0.05;
endsnippet

snippet icon
k = MKtl('icon', "icon-icontrols");
~icon_map_param.(MKtl('icon')[\kn][0], Param(Ndef(\rdn), \delay));
k[\kn].collect({ arg k; k })
k[\kn][0]
k.postElements;
endsnippet

snippet edit
edit: { arg self;
	var window = Window.new;
	var layout;
	layout = self.asView;
	window.layout = layout;
	//window.alwaysOnTop = true;
	window.front;
},
endsnippet

snippet TrackDef
TrackDef(\\${3:live2}_${1:fxbass}, (
	parent: TrackTemplateDef(\track_live2),
	new: { arg self;
		self.init_chain;
		Pdef(self.key+++\pat,
			${VISUAL}
		);
		self;
	},
));
~$1 = TrackDef(\\$3_$1).new;
endsnippet

snippet midside
[sig[0] + sig[1], sig[0] - sig[1]] * (-3).dbamp; 
endsnippet

snippet eventDef
all: { PresetDictionary.new(\Sequencer) },
new: { arg self, key, instrs;

	if(self.all[key].isNil) {
		self = self.deepCopy;
		self.instrs = instrs;
		self.playerWrapper;
		self.coins = IdentityDictionary.new;
		self.populate_tracks;
		self.key = key;
		self.all[key] = self;

	} {
		self = self.all[key];
		self.instrs = instrs;
		self.populate_tracks;
	};
	
	self;
},
endsnippet

snippet protoDef
~${1:trackDef} = ProtoClass((
	all: { PresetDictionary.new(\\$1) },

	new: { arg self, key, val;

		if(self.all[key].isNil) {
			self = self.deepCopy;
			self.key = key;
			self.init(val);
			self.all[key] = self;

		} {
			self = self.all[key];
			//self.val = val;
		};
		
		self;
	},
));
endsnippet

snippet Def
Def {
	classvar <>all;
	var <>key;
	var <>source;

	*initClass {
		all = PresetDictionary(\WindowDef)
	}

	*new { arg key, val;
		if(all[key].isNil) {
			if(val.notNil) {
				^super.new.init(val).prAdd(key)
			} {
				^nil
			}
		} {
			var ret = all[key];
			if(val.notNil) {
				ret.source = val
			};
			^ret;
		}
	}

	prAdd { arg xkey;
		key = xkey;
		all[key] = this;
	}

	init { arg val;

	}

	clear {
		if(key.notNil) {
			all[key] = nil
		};
		^nil
	}
}
endsnippet

snippet test
{ SinOsc.ar(500) ! 2 * 0.1}.play;
endsnippet

snippet cputest
(
	Tdef(\cputest, {

		5000.do { arg idx;
			{ SinOsc.ar(200) ! 2 * 0.1}.play;
			if(idx%100==0) { idx.postln; };
			0.01.wait;

		}
	}).play;
)
endsnippet

snippet HLayout
HLayout (
	${VISUAL}${2}
)${3}
endsnippet

snippet VLayout
VLayout (
	${VISUAL}${2}
)${3}
endsnippet

snippet keyDown "" w
keyDownAction_({ arg me, key, modifiers, unicode, keycode;
	[me, key.asCompileString, modifiers, unicode, keycode].debug("keyDownAction");
	$1
});
endsnippet

snippet mouseDown "" w
mouseDownAction_({ arg view, x, y, modifiers, buttonNumber, clickCount;
	[view, x, y, modifiers, buttonNumber, clickCount].debug("mouseDownAction");
	$1
})
endsnippet

snippet win
var window = Window.new;
var layout;
layout = ${1:VLayout}(
	${2}
);
window.layout = layout;
//window.alwaysOnTop = true;
window.front;
endsnippet

snippet block
block { arg break;
	${VISUAL}${1}
}
endsnippet

snippet { "" w
${1} {
	${VISUAL}${2}
${3}
endsnippet

snippet ( "" w
${1} (
	${VISUAL}${2}
${3}
endsnippet

snippet [ "" w
${1} [
	${VISUAL}${2}
${3}
endsnippet

snippet swing
(1 + (0.06 * Pseq([1,-1],inf)))
endsnippet

snippet if
if($1) {
	${VISUAL}${3}
};$2
endsnippet

snippet ife
if($1) {
	${VISUAL}${3}
} {
	$4
};$2
endsnippet

snippet exec
Veco(~namex).response_mode = \exec;
endsnippet

snippet case
case(
	{ $1 }, {
		$2
	},
	{ $3 }, {
		$4
	}, {
		$5
	}
)$0
endsnippet

snippet asig
(1..sig.size)
endsnippet

snippet ~set_macro
~set_macro.(\k${1:1}, Ndef(~name+++\fx), ${2:\ffreq}, ${3:\freq});
endsnippet

snippet Control
ControlSpec(0,1,${1:\lin})
endsnippet

snippet arg
{ arg self${1};
	${0}
}${2:,}
endsnippet

snippet argv
{ arg ${1:x};
	${VISUAL}${3}
}${2:;}
endsnippet

snippet ~class
~class_${1} = (
	new: { arg self;
		self = self.deepCopy;
	
		self;
	},
);
endsnippet

snippet new
new: { arg self;
	self = self.deepCopy;

	$1

	self;
},
endsnippet

snippet windowescape
win.view.keyDownAction = { arg view, char, modifiers, u, k; 
	//[char, modifiers, u, k].debug("KEYBOARD INPUT");
	if( u == 27 ) { // Esc
		view.close() 
	};
};
endsnippet

#######################################################
###### tracks templates

snippet Ndeffx
(
Ndef(~name+++\fx).put(50, \filter -> { arg in;
	var sig = in;
	
	sig = sig * SinOsc.ar(120);

	sig;
});
);
endsnippet

snippet Ndefgreyhole
Ndef(~name+++\fx).put(50, \filter -> { arg in;
	var sig = in;
	
	sig = Greyhole.ar(sig, 
		\delay.kr(1/4),\damp.kr(0.1),\size.kr(1), \diff.kr(0.707) , \feedback.kr(0.8), \modDepth.kr(0.1), \modFreq.kr(2)
	);

	sig;
});
endsnippet

snippet Greyhole
Greyhole.ar(sig, \delay.kr(1/4),\damp.kr(0.1),\size.kr(1), \diff.kr(0.707) , \feedback.kr(0.8), \modDepth.kr(0.1), \modFreq.kr(2));
endsnippet

snippet fx_channel

~fx_channel.();
~make_fx.();
endsnippet

snippet ~control
~ndef_control_channel.();
endsnippet

snippet ndef_channel

~ndef_channel.();
endsnippet

snippet pdef_channel

~pdef_channel.();

(
SynthDef(~name, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200, doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);

(
~pdef_init.(Pbind(
	\instrument, ${1:~name},
	\degree, Pseq([0],inf),
	\isRest, Veco(~name).isrest,
	\dur, 1/4,
	\amp, 0.1 * Pkey(\amp),
))
);
endsnippet

snippet spn
(
SynthDef(~name, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200, doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = ${1:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);

(
~pdef_init.(Pbind(
	\instrument, ${2:~name},
	\degree, Pseq([0],inf),
	\isRest, Veco(~name).isrest,
	\dur, 1/4,
	\amp, 0.1,
))
);
endsnippet

snippet prepdn
(
if(Pdef(~name +++ \pre).source.isNil) { Pdef(~name +++ \pre, Pbind()) };
Pdef(~name, Pdef(~name +++ \pre) <> Pbind(
	\instrument, ${1:~name},
	\degree, Pseq([0],inf),
	\isRest, Veco(~name).isrest,
	\dur, 1/4,
	\amp, 0.1 * Pkey(\amp),
) <> Veco(~name).mixer)
);
endsnippet

snippet pdn
(
~pdef_init.(Pbind(
	\instrument, ${1:~name},
	\degree, Pseq([0],inf),
	\isRest, Veco(~name).isrest,
	\dur, 1/4,
	\amp, 0.1,
))
);
endsnippet

snippet ndn
Ndef(~name+++\fx).put(0, { arg amp=0.1;
	var sig;
	${0}
	amp = amp * \gain.kr(1);
	sig = Splay.ar(sig, \spread.kr(0.8), amp, \pan.kr(0));
	sig;
})
endsnippet

snippet preinit
if(Pdef(~name +++ \pre).source.isNil) { Pdef(~name +++ \pre, Pbind()) };
Pdef(~name, Pdef(~name +++ \pre) <> Pbind(
endsnippet

snippet premod
Pdef(~name +++ \pre, Pbind(
	${1:\\${2:freq}, ${3:100}},
));
endsnippet

snippet sdn
(
SynthDef(~name, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200, doneAction=2;
	var sig, sig1, sig2, sig3;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);
endsnippet

snippet sdnrlpf
(
SynthDef(~name, { arg out=0, amp=0.1, gate=1, pan=0, spread=0.8, freq=200, doneAction=2, ffreq=4000, rq=0.3;
	var sig, sig1, sig2, sig3;
	sig = LFSaw.ar(freq * [1.01,1,0.99]);
	sig = RLPF.ar(sig, ffreq, rq);
	sig = sig * EnvGen.ar(\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:doneAction);
	sig = Splay.ar(sig, spread, amp, pan);
	Out.ar(out, sig);
}).add;
);
endsnippet

#######################################################
###### Others

snippet nfx
Ndef(~name+++\fx)
endsnippet

snippet pname
Pdef(~name+++${1:\\mod})${0}
endsnippet

snippet fxfx
Ndef(~name+++\fx).put(50, \filter -> { arg in;
	var sig = in;
	${0}
	sig;
})
endsnippet

snippet mixerfx
Ndef(~name+++\mixer).put(50, \filter -> { arg in;
	var sig = in;
	${0}
	sig;
})
endsnippet

snippet mixerfxp
(
Ndef(~name+++\mixer).put(50, \filter -> { arg in;
	var sig = in;
	${0}
	sig;
})
)
endsnippet

snippet ndefquant
Ndef(~name+++${1:\lfo1}).quant = Pdef.defaultQuant;
endsnippet

snippet ndeflfolag
Ndef(~name+++\lfo1).quant = Pdef.defaultQuant;
Ndef(~name+++\lfo1, { arg val=1, vlag=0.1; val.lag(vlag) });
Ndef(~name+++\lfo1).put(1, \set -> Pbind(
	\val, Pseq([1],inf),
	\dur, 1,
));
endsnippet

snippet envspec
\env -> [4, ControlSpec(0.001,8,\exp, 0, 1), nil, nil, Env.new([9.5, 1, 0.5, 0], [0.105, 0.16, 00.2])],
endsnippet

snippet patfx
~patfx.(~name+++\\patfx) <>
endsnippet

snippet Pdefname
(
Pdef(~name, Pdef(~namex,
	Ppar([
		${1}${VISUAL}
	])
))
);
endsnippet

snippet initproject
Veco.load_lib("main.scd");
Veco.load_lib("synth.scd");

Veco.main.board_size = Point(32,64);
~set_default_quant.(4);
~set_project_tempo.(1);
~load_standard_quickpad.();

// END

Veco.main.fadeout_time = 16;

endsnippet

snippet vmixer
Veco(~name).make_mixer;
endsnippet


#######################################################
###### SynthDef synthdef preset

snippet fxrec
Pbind(
	\instrument, \recorder,
	\addAction, \addToTail,
	\lag, 0.0009,
	\inbus, BusDef(\recorder, \audio),
	\bufnum, BufDef(\mybuf, s.sampleRate * 2/~t, 2),
	\dur, Pn(1,1),
	\amp, 0.1,
),
endsnippet

snippet fxrevdel
Ndef(\revdel, { arg in=3, del=1, feed=1,dw=0.35;
	var ph, ph2, sr, trig,inlet,snd1,snd2;
	var sig;
	in = BusDef(\sendbus1, \audio, 1);
	sr=SampleRate.ir;
	inlet=InFeedback.ar(in,2);
	trig=Impulse.ar(del.reciprocal);
	ph=Phasor.ar(trig,del.reciprocal/sr);
	ph2=Wrap.ar(ph+0.5);
	snd1=AllpassL.ar(inlet,2,ph*del*2,feed)*sin(ph*pi);
	snd2=AllpassL.ar(inlet,2,ph2*del*2,feed)*sin(ph2*pi);
	sig = (inlet*(dw* -1+1))+(snd1+snd2*dw);
	sig.flop
}).play;
endsnippet

snippet fxrdn
RandDelayNetwork(\default).make(\\${1:rdn1}, "5--", BusDef(\sendbus1, \audio, 2));
RandDelayNetwork(\default).getPbindCompileString(\\$1);
Ndef(\\$1).play;
Ndef(\\$1).edit;
endsnippet

snippet sdkick
SynthDef(\sdkick, { |out=0, amp=0.1, pan=0, fratio=1.5, freqpan=0.01, spread=0.08, timeScale=1|
	var env0, env1, env1m;
	var sig;

	//freqpan = [-1,0,1] * freqpan;
	env0 = \env0.kr(Env.new([0, 1, 0.5, 0], [0.005, 0.16, 00.2], [-4, -2, -4]));
	env1 = \env1.kr(Env.new([210, 62, 59], [0.045, 0.29], [-4, -5]));
	
	env0 =  EnvGen.ar(env0, doneAction:2, timeScale:timeScale);
	env1 = EnvGen.ar(env1, timeScale:timeScale);
	
	sig = LFPulse.ar(env1 * freqpan, 0, 0.5, 1, -0.5);
	sig = sig + WhiteNoise.ar(1);
	sig = LPF.ar(sig, env1*fratio);
	sig = sig + SinOsc.ar(env1, 0.5);
	sig = LPF.ar(sig, \lpf.kr(2000));
	
	//sig = sig * 1.2;
	//sig = sig.clip2(1);

	sig = sig * env0 * 8;
	sig = Pan2.ar(sig, pan, amp);
	
	OffsetOut.ar(out, sig);
}, metadata:(specs:(
	timeScale: ControlSpec(0.001,4,\lin, 0, 1),
))).add;
endsnippet

snippet sdhat
SynthDef(\sdhat, { arg out=0, amp=0.1, gate=1, pan=0, freq=200;
	var sig;
	sig = WhiteNoise.ar;
	sig = RLPF.ar(sig, \lpf.kr(15100), \rq.kr(0.5));
	sig = RHPF.ar(sig, \hpf.kr(6100), \rq.kr(0.5));
	//sig = sig * EnvGen.ar(Env.adsr(0.01,0.1,0.8,0.2,1,-4),gate,doneAction:2);
	sig = sig * EnvGen.ar(Env.perc(0.01,\rel.kr(0.1),-4),gate,doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
endsnippet

snippet sdsnare
SynthDef(\sdsnare, { arg out=0, amp=0.1, gate=1, pan=0, freq=200;
	var sig;
	var sig1, sig2, sig3, sig4, sig5, sig6, sig7, sig8;
	var click=0, osc=0, snare=0;
	click = WhiteNoise.ar;
	click = click * EnvGen.kr(Env([0,1,0],[0.001,0.004]), 1) * 1;

	osc = SinOsc.ar( EnvGen.kr(Env([400,150,151],[0.01,0.08]), 1) );
	osc = osc * EnvGen.kr(Env([0,1,0],[0.001,0.20], -4), 1);
	osc = osc * 2;
	osc = HPF.ar(osc, 180);

	snare = WhiteNoise.ar;
	snare = LPF.ar(snare, EnvGen.ar(Env([14700,4852,3451],[0.01,0.1]), 1));
	snare = HPF.ar(snare, EnvGen.ar(Env([9700,4452,3451],[0.01,0.1]), 1));
	snare = snare * EnvGen.kr(Env([0,1,0],[0.001,0.18], -2), 1);

	sig = click + osc + snare;

	sig = sig * EnvGen.ar(Env.adsr(0.01,0.1,0.8,0.4),gate,doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
endsnippet

#######################################################
###### SynthDef synthdef

snippet Local
sig = LocalIn.ar(2) * \fb.kr(0.1);
LocalOut.ar(sig);
endsnippet

snippet Fb
sig = sig + Fb({ arg fb;
	var isig;
	isig = ( fb * \fb.kr(1) ) + sig;

	isig = Limiter.ar(isig);
	isig;
});
endsnippet

snippet FreeVerb2
FreeVerb2.ar(${1:sig}[0], $1[1], \mix.kr(0.5), \room.kr(1), \damp.kr(0.4));
endsnippet

snippet Compander
Compander.ar(sig, in, \cpt.kr(0.4), \cpbelow.kr(1.001), \cpabove.kr(0.9), \cpclamp.kr(0.01), \cprelax.kr(0.1));
endsnippet

snippet in
InFeedback.ar(\inbus.kr(BusDef(\zero, \audio)), 2); 
endsnippet

snippet Panrand
Pan2.ar(sig, {LFNoise1.kr(1/2).range(-1.0,1.0)} ! sig.size, amp).mean;
endsnippet

snippet itrig
var itrig;
var igate;
itrig = \itrig.tr(1);
//igate = \igate.kr(1);
igate = Trig.kr(itrig, \isustain.kr(0.1));
endsnippet

snippet TGrains
TGrains.ar(2, clk, bufnum, pitch_stretch, pos % BufDur.kr(bufnum), gdur, pan, 1);
endsnippet

snippet sdgrain
SynthDef(\graine, { arg out=0, amp=0.1, gate=1, pan=0, freq=200, pitch_stretch=1, pos=0, gdur=0.1, mbufnum=0;
	var sig;
	var clk = Impulse.ar(\gfreq.kr(1));
	sig = TGrains.ar(2, clk, mbufnum, pitch_stretch, pos % BufDur.kr(mbufnum), gdur, pan, 1);
	sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
endsnippet

snippet bufstutter
var bufnum = LocalBuf(s.sampleRate * 4,2);
var bufgate, stuttrig, choosetrig, recordtrig;
var attack=0.01, decay=0.01, stutter;
var rate = 1;
var env;
bufnum.clear;

bufgate = Duty.kr(1/4, 0, Dseq([
	0,0,0,0, 1,1,0,0,
	0,1,0,1, 0,1,0,0,
],inf));
choosetrig = bufgate > 0;
stutter = DC.kr(1/4);
stutter = Duty.kr(1/4, 0, Dseq(1/[
	1,2,4,8,
],inf));
stuttrig = TDuty.ar(stutter, choosetrig + Changed.kr(stutter), 1);
recordtrig = Trig1.kr(choosetrig, 0.01);
env = EnvGen.ar(Env([0,1,1,0],[attack, stutter-attack-decay, decay]), stuttrig);

RecordBuf.ar(sig, bufnum, 0, 1, 0, run:1,loop:0,trigger: recordtrig,doneAction:0);
sig1 = PlayBuf.ar(2, bufnum, rate:rate, trigger:stuttrig,startPos:0, loop:0) * env;
sig1 = sig1 * 1.2;
sig = SelectX.ar( bufgate.lag(0.01), [sig, sig1]);
endsnippet

snippet Record
RecordBuf.ar(sig, bufnum, offset:0, recLevel:1, preLevel:0, run:1, loop:0, trigger:1);
endsnippet

snippet PlayBuf
PlayBuf.ar(2, bufnum, BufRateScale.kr(bufnum) * speed, trigger, startPos: (pos*BufFrames.kr(bufnum)), doneAction:2, loop: loop);
endsnippet

snippet BufRd
var phase;
phase = Phasor.ar(1, 1,0,BufFrames.kr(bufnum));
sig = BufRd.ar(2, bufnum, phase);
endsnippet

snippet oscsampler
BufRd.ar(2, bufnum, SinOsc.ar(freq).unipolar * range );
endsnippet


snippet CombL
CombL.ar(sig, 4/~t, 1/8/~t,1/~t) + sig;
endsnippet

snippet flanger
AllpassL.ar(sig, 4/~t, 1/8/~t * SinOsc.kr(1/45).range(0.9,1.1),14) + sig;
endsnippet


snippet Ndefline
Ndef(~name+++\lfo1, { XLine.kr(100,1,8) });
endsnippet

snippet kr
\\${VISUAL:\key}.kr(${1})
endsnippet

snippet krv "" w
\\${1:key}.kr(${VISUAL})
endsnippet

snippet ndefgain
amp = amp * \\gain.kr(1);
endsnippet

snippet gain
sig = sig * \\gain.kr(1);
endsnippet

snippet SynthDef
SynthDef(\\${1:zed}, { arg out=0, gate=1, amp=0.1, pan=0, freq=200;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
endsnippet

snippet SynthDefp
(
SynthDef(\\${1:zed}, { arg out=0, gate=1, amp=0.1, pan=0, freq=200;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
);
endsnippet

snippet SynthDefx
SynthDef(\\${1:zedfx}, { arg out=0, gate=1;
	var sig;
	var in = InFeedback.ar(\inbus.kr(BusDef(\zero, \audio)), 2); 
	sig = in;
	sig = ${2:sig * SinOsc.ar(300)};
	sig = SelectX.ar(\mix.kr(0.5), [in, sig]);
	sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
	sig = sig * \gain.kr(1);
	Out.ar(out, sig);
}).add;
endsnippet

snippet SynthDefxp
(
SynthDef(\\${1:zedfx}, { arg out=0, gate=1;
	var sig;
	var in = InFeedback.ar(\inbus.kr(BusDef(\zero, \audio)), 2); 
	sig = in;
	sig = ${2:sig * SinOsc.ar(300)};
	sig = SelectX.ar(\mix.kr(0.5), [in, sig]);
	sig = sig * EnvGen.kr(\adsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
	sig = sig * \gain.kr(1);
	Out.ar(out, sig);
}).add;
);
endsnippet

snippet SynthDefinp
(
SynthDef(\\${1:zed}, { arg out=0, gate=1, mix=0.5, gain=1;
	var in, sig;
	in = InFeedback.ar(\inbus.kr(BusDef(\zero, \audio)), 2);
	sig = ${2:in};
	sig = SelectX.ar(mix, [in, sig]);
	sig = sig * EnvGen.ar(\asr.kr(Env.asr(0.01,1,0.01)),gate,doneAction:2);
	sig = sig * gain;
	Out.ar(out, sig);
}).add;
)
endsnippet

snippet Ndefp
(
Ndef(\\${1:zed}, { arg freq=200, pan=0, amp=0.1;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = Pan2.ar(sig, pan, amp);
}).play;
);
endsnippet

snippet Instr
Instr(\\${1:zed}, { arg amp=0.1, gate=1, pan=0, freq=200;
	var sig;
	sig = ${2:SinOsc.ar(freq)};
	sig = sig * EnvGen.ar(\\adsr.kr(Env.adsr(0.01,0.1,0.8,0.1)),gate,doneAction:2);
	sig = Pan2.ar(sig, pan, amp);
}).addSynthDef;
endsnippet

snippet specs
}, metadata:(specs:(
	duration: ControlSpec(0.001,4,\lin, 0, 1)
))).add;
endsnippet

snippet Pan
Pan2.ar(sig, pan, amp);
endsnippet

snippet EnvGen
EnvGen.ar(Env.adsr(0.1,0.1,1,0.1),gate,doneAction:2);
endsnippet

snippet legato
var igate, dur, sustain, legato;

dur = 1/16;
legato = 0.5;
sustain = legato * dur;

igate = TDuty.kr(dur/~t, 0, Dseq([
	1,1,1,0,
],inf))*sustain/~t;

sig = sig * EnvGen.ar(Env.adsr(0.1,0.1,1,0.1),Trig.kr(igate,igate),doneAction:0);
endsnippet

snippet Named
NamedControl.kr(\\${1:adsr}, Env.adsr(0.1,0.1,0.8,0.1))
endsnippet

snippet adsr
EnvGen.kr(\\${1:adsr}.kr(Env.adsr(0.1,0.1,0.8,0.1)), gate, doneAction:2);
endsnippet

snippet asr
EnvGen.kr(\\${1:asr}.kr(Env.asr(0.01,1,0.01)), gate, doneAction:2);
endsnippet

snippet iadsr
EnvGen.kr(\iadsr.kr(Env.adsr(0.1,0.1,0.8,0.1)), Trig.kr(\itrig.kr(1),\isustain.kr(1)), doneAction:0);
endsnippet

snippet env
EnvGen.kr(\\${1:env}.kr(Env([1,2,1,2],[0.1,0.8,0.1].normalizeSum)), gate, timeScale:tsustain);
endsnippet

snippet Env
Env([1,2,1],[0.1,0.8])
endsnippet

snippet envperc
EnvGen.kr(Env.perc(0.0001,0.1), gate)
endsnippet

snippet envas
EnvGen.kr(Env([0,1,0],[0.1,0.8]), 1);
endsnippet

snippet envs
EnvGen.kr(Env([1,2,1],[0.1,0.8]), 1);
endsnippet

snippet envc
EnvGen.kr(Env([1,2,1],[0.1,0.8,0.3]).circle, 1);
endsnippet

snippet FreeVerb
FreeVerb.ar(sig, mix:0.2, room:0.5, damp:0.5);
endsnippet

snippet	RLPF
RLPF.ar(sig, \\lpf.kr(100), \rq.kr(0.5));
endsnippet

snippet	RLPFr
RLPF.ar(sig, \\lpfr.kr(1.1) * freq, \rq.kr(0.5));
endsnippet

snippet	RLPFmix
sig1 = RLPF.ar(sig, \\lpf.kr(100), \rq.kr(0.5));
sig = SelectX.ar(\lpmix.kr(0.5), [sig, sig1]);
endsnippet

snippet filtersplit
var freqlim, clipmix;

freqlim = 300;
clipmix = 1;
sig1 = LPF.ar(sig, freqlim);
sig2 = HPF.ar(sig, freqlim);
sig3 = SelectX.ar(clipmix, [sig1, sig2]);
sig4 = SelectX.ar(1-clipmix, [sig1, sig2]);
sig = sig3 + sig4;
endsnippet

snippet distmix
sig1 = sig.clip2(1);
sig2 = sig.distort(1);
sig3 = sig.tanh(1);
sig = SelectX.ar(\distmix.kr(0.5)*2, [sig1, sig2, sig3]);
endsnippet

snippet dist
( sig*\distamp.kr(10) ).tanh * \distpostamp.kr(1/2)
endsnippet

snippet mix
SelectX.ar(${1:\mix.kr(0.5)}, [sig, sig1]);
endsnippet

snippet mixin
SelectX.ar(${1:\mix.kr(0.5)}, [in, sig]);
endsnippet

snippet mix2
SelectX.ar(\mix.kr(0.5), [sig1, sig2]);
endsnippet

snippet SelectX
SelectX.ar(\mix.kr(0.5), [sig1, sig2]);
endsnippet

snippet mix3
SelectX.ar(\mix.kr(0.5)*2, [sig1, sig2, sig3]);
endsnippet

snippet varsig
var sig1, sig2, sig3, sig4, sig5, sig6, sig7, sig8;
endsnippet

snippet varenv
var env1, env2, env3, env4, env5, env6, env7, env8;
endsnippet

snippet varlfo
var lfo1, lfo2, lfo3, lfo4, lfo5, lfo6, lfo7, lfo8;
endsnippet

snippet varmod
var mod1, mod2, mod3, mod4, mod5, mod6, mod7, mod8;
endsnippet

snippet varseq
var seq1, seq2, seq3, seq4, seq5, seq6, seq7, seq8;
endsnippet

snippet 3osc
sig1 = LFSaw.ar(freq);
sig2 = LFPulse.ar(freq);
sig3 = SinOsc.ar(freq);
sig = SelectX.ar(\oscmix.kr(0.5)*2, [sig1, sig2, sig3]);
endsnippet

snippet TDuty
TDuty.kr(1/~t, 0, Dseq([
	1,0,0,0,
],inf))
endsnippet

snippet Duty
Duty.kr(1/~t, 0, Dseq([
	1,0,0,0,
],inf))
endsnippet

snippet parafil
sig2 = SelectX.ar(\parafil.kr(0), [sig1, sig]);
sig = SelectX.ar( \parafil.kr, [sig2, sig1 + sig2]);
endsnippet

snippet so
SinOsc.ar(${1:freq}) ${0}
endsnippet

snippet lfs
LFSaw.ar(${1:freq}) ${0}
endsnippet

snippet noise
LFNoise1.kr(${1:1/2}).range(${2:0.0},${3:1.0})${0}
endsnippet

snippet LFNoise
LFNoise1.kr(1/2).range(0.0,1.0)
endsnippet

snippet Demand
Demand.kr(trig, 0, Dseq([
	1,0,0,0,
],inf))
endsnippet

snippet Out
Out.ar(out, sig);
endsnippet

snippet fm
( ${2:SinOsc.kr(${1})} * ${3:1} + 1 )
endsnippet

snippet fma
( SinOsc.ar(freq * \fmr.kr(1)) * \fmamp.kr(0.5) + 1 )
endsnippet

snippet lfo
SinOsc.kr(${1}).range(${2:0},${3:1})
endsnippet

snippet spread
((0..${1:7})/$1 - 0.5 * ${2:\\fspread.kr(0.1)} + 1)
endsnippet

snippet Splay
Splay.ar(sig, \spread.kr(0.8), amp, pan);
endsnippet

snippet Splaya
Splay.ar(sig, \spread.kr(0.8), \amp.kr(1), \pan.kr(0));
endsnippet

snippet ndeffreq
Ndef(~name+++${1:\lfo1}).bus.asMap,
endsnippet

snippet ndeflfo
Ndef(~name+++${1:\lfo1}),
endsnippet

snippet ndeffxdef
Ndef(~name+++\fx, {
	var in = In.ar(BusDef(~name+++\fx),2);
	var sig;
	var sig1,sig2,sig3,sig4,sig5;
	sig = in;
	sig;
});
endsnippet

snippet ndeflfodef
Ndef(~name+++\lfo${1:1}, { ${2:SinOsc.kr(1).range(50,100)}  })${0}
endsnippet

snippet ndeflfodefq
Ndef(~name+++${1:\lfo1}, { ${2:SinOsc.kr(1).range(50,100)}  });
Ndef(~name+++${1:\lfo1}).quant = Pdef.defaultQuant;
endsnippet

snippet ndefsetdef
Ndef(~name+++${1:\lfo1}).put(1, \set -> Pbind(
	${2:\freq, Pseq([1],inf),}
	\dur, 1,
));
endsnippet

#######################################################
###### Patterns patterns

snippet Ptpar
Ptpar([
	0, ${VISUAL}
])
endsnippet

snippet Pn "" w
Pn(${VISUAL},${1:inf})${0}
endsnippet

snippet Psym
Psym(Pseq([0,1],inf), (
	0: ${VISUAL},
	1: ${2:2},
))
endsnippet

snippet Pwalk
Pwalk(${1:(0..12)}, 
	${VISUAL},
)
endsnippet

snippet Pdur
PdurStutter(Pseq([1,4,2,8],inf), 1/2),
endsnippet

snippet 60
0,0,0, 0,0,0,
endsnippet

snippet 90
0,0,0, 0,0,0, 0,0,0,
endsnippet

snippet 91
1,1,1, 1,1,1, 1,1,1,
endsnippet

snippet 120
0,0,0, 0,0,0,  0,0,0, 0,0,0,
endsnippet

snippet 61
1,1,1, 1,1,1,
endsnippet

snippet 121
1,1,1, 1,1,1,  1,1,1, 1,1,1,
endsnippet

snippet 41
1,1,1,1,
endsnippet

snippet 40
0,0,0,0,
endsnippet

snippet 170
1,0,0,0, 0,0,0,0,
endsnippet

snippet 18
(1..${1:8})/$1${0}
endsnippet

snippet 81
1,1,1,1, 1,1,1,1,
endsnippet

snippet 80
0,0,0,0, 0,0,0,0,
endsnippet

snippet 160
0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,
endsnippet

snippet 4140
1,1,1,1, 0,0,0,0,
endsnippet

snippet 4041
0,0,0,0, 1,1,1,1, 
endsnippet

snippet 810
1,0,1,0, 1,0,1,0, 
endsnippet

snippet 4set
0,0,0,0,  
1,0,0,0, 
1,0,1,0,  
0,0,1,0,  
1,1,1,1, 
1,1,0,0,  
0,0,1,1,  
endsnippet

snippet 8set
1,1,1,1, 1,1,1,1,
0,0,0,0, 0,0,0,0,
0,0,0,0, 1,1,1,1, 
1,1,1,1, 0,0,0,0,
1,1,0,0, 1,1,0,0, 
0,0,1,1, 0,0,1,1, 
1,0,0,0, 0,0,0,0,
1,0,0,0, 1,0,0,0,
1,0,1,0, 1,0,1,0, 
0,0,1,0, 0,0,1,0, 
0,0,0,0, 1,0,0,0, 
endsnippet

snippet Prout
Prout({ arg ev;
	${VISUAL}${1}
})$0,
endsnippet

snippet Pfunc
Pfunc({ arg ev;
	${VISUAL}${1}
}),
endsnippet

snippet Pfuncn
Pfuncn({ arg ev;
	${VISUAL}${1}
},1),
endsnippet

snippet Plazy
Plazy({ arg ev;
	${VISUAL}${1}
}).loop,
endsnippet

snippet grooveamp
\amp, Pkey(\amp) * Pseq([
	0.3,0.5,1,0.5,
],inf),
endsnippet

snippet amp
\amp, Pkey(\amp) * ${1:1},
endsnippet

snippet Pseg
Pseg(${VISUAL:Pseq([0,1],inf)},${1:8}),
endsnippet

snippet Pstep
Pstep(${VISUAL:Pseq([0,1],inf)},${1:2}),
endsnippet

snippet Pseqcoin
Pseq([1,0,0,0],inf).coin.not,
endsnippet

snippet Pseqcoin8
Pseq([1,0,0,0, 0,0,0,0],inf).coin.not,
endsnippet

snippet Pseqcoin16
Pseq([
	1,0,0,0, 0,0,0,0,
],inf).coin.not,
endsnippet

snippet coin
\\isRest, Pseq([
	${1:1,${2:0},$2,$2, $2,$2,$2,$2,}
],inf).coin.not,
endsnippet

snippet	mute
\isRest, true,
endsnippet

snippet coindup
\\isRest, Pseq({[
	${1:1,${2:0},$2,$2, $2,$2,$2,$2,}
].clump(${3:8}).choose}.dup(${4:4}).flat,inf).coin.not,
endsnippet

snippet dup
Pseq({[
	${1:1,${2:0},$2,$2, $2,$2,$2,$2,}
].clump(${3:8}).choose}.dup(${4:4}).flat,inf)
endsnippet

snippet legatorest
\isRest, Pfunc({ arg ev; ev[\legato] <= 0 }),
endsnippet

snippet leg
\legato, Pseq([
	1,0,0,0, 0,0,0,0,
],inf),
endsnippet

snippet legr
\legato, Pseq([
	${1:1},0,0,0, 0,0,0,0,
],inf),
\isRest, Pfunc({ arg ev; ev[\legato] <= 0 }),
endsnippet

snippet isRestcoin
\\isRest, Pseq([
	1,0,0,0,
],inf).coin.not,
endsnippet

snippet isRestx
\\isRest, Veco(~namex).isrest(16),
endsnippet

snippet isRest
\\isRest, Veco(~name).isrest,
endsnippet

snippet mixer
* Pkey(\amp),
) <> Veco(~name).mixer)
endsnippet


snippet Pseqadsr
Pseq([
	${1:[ Env.adsr(0.1,0.1,0.8,0.1) ]},
],inf),
endsnippet

snippet Pseqenv
Pseq([
	${1:[ Env([1,2,1], [0.1,0.1]) ]},
],inf),
endsnippet

snippet Pfindur
Pfindur(${2:32},
	${VISUAL}${1}
)${3:,}
endsnippet

snippet Ppar
Ppar([
	${VISUAL}${1}
]),
endsnippet

snippet Pparout
Pbind(\out, BusDef(\\${2:sendbus1}, \audio)) <>
Ppar([
	${VISUAL}${1}
]),
endsnippet

snippet Pparfin
Pfindur(${2:16}, Ppar([
	${VISUAL}${1}
])),
endsnippet

snippet Pseq
Pseq([
	${VISUAL}${1}
],${2:1}),
endsnippet

snippet Pser
Pser([
	${VISUAL}${1}
],${2:1}),
endsnippet

snippet Pseqi
Pseq([
	${VISUAL}${1}
],${2:inf}),
endsnippet

snippet Prand
Prand([
	${VISUAL}${1}
],${2:1}),
endsnippet

snippet Pat
${1:Pser}([
	${VISUAL}${2}
],${3:1}),
endsnippet

snippet Dseq
Dseq([
	${VISUAL}${1}
],${2:1}),
endsnippet

snippet Dstutter
Dstutter(${1:8},
	${VISUAL}${2}
),
endsnippet

snippet Drand
Drand([
	${VISUAL}${1}
],${2:1}),
endsnippet

snippet Pmono
Pmono(\\${1:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1,
)${3:,}
endsnippet

snippet Pmonofx
Pmono(\\${1:default},
	\inbus, BusDef(\\${2:sendbus1}, \audio),
	\dur, 1,
)${3:,}
endsnippet

snippet Pbind
Pbind(
	\instrument, \\${1:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1,
)${2:,}
endsnippet

snippet Pbindchain
Pbind(
	\\${1:out, BusDef(\\sendbus3, \\audio),}
) <>
endsnippet

snippet Pbindp
(
Pbind(
	\instrument, \\${1:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1,
);
)
endsnippet

snippet Pbindv
Pbind(
	${VISUAL}${1}
),$2
endsnippet

snippet Pdef
Pdef(\\${1:zed}, Pbind(
	\instrument, \\${2:default},
	\freq, 200,
	\dur, 1,
	\amp, 0.1,
));
endsnippet

snippet Pdefp
(
Pdef(\\${1:zed}, 
	Pbind(
		\instrument, \\${2:default},
		\degree, Pseq([0],inf),
		\dur, 1,
		\amp, 0.1,
	)
).play;
);
endsnippet

snippet Pdefv
Pdef(\\${1:zed}, 
	${VISUAL}${2}
),$3
endsnippet

snippet Pdefpar
Pdef(\\${1:zed}, 
	Ppar([
		${VISUAL}${2}
	])
).play;
endsnippet

snippet Pdefmain
Pdef(\part, Pdef(\\${1:main}, 
	Pseq([
		${VISUAL}${2}
	])
)).play;
endsnippet

snippet Pdefparp
(
Pdef(\\${1:zed}, 
	Ppar([
		${VISUAL}${2}
	])
).play;
);
endsnippet

snippet Pdefseq
Pdef(\\${1:zed}, 
	Pseq([
		${VISUAL}${2}
	])
).play;
endsnippet

snippet Pdefseqp
(
Pdef(\\${1:zed}, 
	Pseq([
		${VISUAL}${2}
	])
).play;
);
endsnippet

snippet Pdefpart
(
Pdef(\\${3:part}, Pdef(\\${1:zed}, 
	Ppar([
		${VISUAL}${2}
	])
)).play;
);
endsnippet


snippet Pdefdemo
(
Pdef(\\${3:demo}, Pdef(\\${1:xdemo}, 
	Ppar([
		${VISUAL}${2}
	])
)).play;
);
endsnippet


snippet smp
Pbind(
	\instrument, \playersec,
	\bufnum, BufDef($2'voices/feynman.flac'),
	\dur, 1,
	\gain, 1,
)$1
endsnippet

snippet kitlkick
Pbind(
	\instrument, \playersec,
	\bufnum, ~buflib.kick[1010].value,
	\bufnum, ~buflib.kick[~buflib.kick.size.rand.debug("k")].value,
	\isRest, Pseq([
		1,0,0,0, 0,0,0,0,
	],inf).coin.not,
	\dur, 1/8,
	\gain, 0.3,
),
endsnippet


snippet kitlsnare
Pbind(
	\instrument, \playersec,
	\bufnum, ~buflib.snare[1719].value,
	\bufnum, ~buflib.snare[~buflib.snare.size.rand.debug("s")].value,
	\isRest, Pseq([
		0,0,0,0, 1,0,0,0,
	],inf).coin.not,
	\dur, 1/8,
	\gain, 0.61,
),
endsnippet

snippet kitlhat
Pbind(
	\instrument, \playersec,
	\bufnum, ~buflib.hat[1064].value,
	\bufnum, ~buflib.hat[~buflib.hat.size.rand.debug("h")].value,
	\isRest, Pseq([
		1,0,1,0, 1,0,1,0,
	],inf).coin.not,
	\dur, 1/8,
	\gain, 0.31,
),
endsnippet

snippet kitkick
PatKitDef(\sample1).asPattern(Pbind(
	\kitIndex, 0,
	\isRest, Pseq({[
		1,0,1,0, 0,0,0,0,
		1,0,0,1, 0,0,0,0,
		1,0,0,0, 0,0,0,0,
		1,0,0,0, 0,0,1,0,
	].clump(8).choose}.dup(8).flat,inf).coin.not,
	\sustain, 0.1,
	\dur, 1/8,
))
endsnippet

snippet kitsnare
PatKitDef(\sample1).asPattern(Pbind(
	\kitIndex, 4,
	\isRest, Pseq({[
		0,0,0,0, 1,0,0,0,
	].clump(8).choose}.dup(8).flat,inf).coin.not,
	\sustain, 0.1,
	\dur, 1/8,
))
endsnippet

snippet kithat
PatKitDef(\sample1).asPattern(Pbind(
	\kitIndex, 8,
	\isRest, Pseq({[
		1,1,1,1, 1,1,1,1,
		1,0,1,0, 1,0,1,0,
		1,0,0,0, 1,0,0,0,
		0,0,1,0, 0,0,1,0,
	].clump(8).choose}.dup(8).flat,inf).coin.not,
	\sustain, 0.1,
	\dur, 1/8,
))
endsnippet

snippet kitksnare
PatKitDef(\ksh2b).asPattern(Pbind(
	\kitIndex, 5,
	\isRest, Pseq([
		0,0,0,0, 1,0,0,0,
	],inf).coin.not,
	\sustain, 0.1,
	\gain, 0.2,
	\dur, 1/8,
)),
endsnippet

snippet kitbsnare
PatKitDef(\bat).asPattern(Pbind(
	\kitIndex, 4,
	\isRest, Pseq([
		0,0,0,0, 1,0,0,0,
	],inf).coin.not,
	\sustain, 0.1,
	\velamp, 1/3,
	\dur, 1/8,
)),
endsnippet

snippet kitbhat
PatKitDef(\bat).asPattern(Pbind(
	\kitIndex, 8,
	\isRest, Pseq([
		1,0,
	],inf).coin.not,
	\adsr, Pseq([
		[ Env.adsr(0.001,0.1,0.8,0.1) ],
	],inf),
	\sustain, 0.1/2,
	\velamp, 1/6,
	\dur, 1/8,
)),

endsnippet

snippet kitbclap
PatKitDef(\bat).asPattern(Pbind(
	\kitIndex, 16,
	\isRest, Pseq([
		0,0,0, 0,0,0, 1,0,0, 0,0,0,
		0,0,0, 0,0,0, 1,0,0, 0,0,0,
		0,0,0, 0,0,0, 1,0,0, 0,0,0,
		0,0,0, 0,0,0, 1,0,0, 0,0,0,

		0,0,0, 0,0,0, 1,0,0, 0,0,0,
		0,0,0, 0,0,0, 1,0,0, 0,0,0,
		0,0,0, 0,0,0, 0,0,0, 0,0,0,
		0,0,0, 0,0,0, 1,0,0, 0,0,0,
	],inf).coin.not,
	\velamp, 1/3,
	\sustain, 0.1,
	\dur, 1/12,
)),
endsnippet

snippet kitphyhat
Pbind(
	\instrument, \phyhat3,
	\isRest, Pseq([
		1,1,
	],inf).coin.not,
	\sustain, 0.05,
	\fac1,0.1,
	\dur, 1/8,
	\amp, 0.01 * Pseq([1,0.7],inf),
),
endsnippet

snippet kitkickx
Pbind(
	\instrument, \snapkickx,
	\bodyfreqenv, [ Env([261, 54, 21], [0.035, 0.08], curve: \exp) ],
	\dur, 1/8,
	\isRest, Pseq([
		1,0,0,0, 0,0,0,0,
		1,0,1,0, 0,0,0,0,
	],inf).coin.not,
	\amp, 0.1,
),
endsnippet

snippet kitkickxx
Pbind(
	\instrument, \snapkickx,
	\bodyfreqenv, [ Env([261, 54, 21], [0.035, 0.08], curve: \exp) ],
	\bodyenv, [ Env.linen(0.005, 0.1, 0.3) ],

	\popfstart, 750,
	\popfend, 261,
	\popfdur, 0.02,
	\popenv, [ Env.linen(0.001, 0.02, 0.001) ],
	\popamp, 0.15,

	\formfund, 910,
	\formfreq, 4760,
	\formbw, 2110,
	\lpf, 3140,
	\clickat, 0.001,
	\clickrel, 0.01,
	\clickamp, 0.15,

	\distpreamp, 1,
	\distpostamp, 1,

	\isRest, Pseq([
		1,0,0,0, 1,0,0,0,
	],inf).coin.not,
	\dur, 1/8,
	\amp, 0.1,
),
endsnippet

snippet kitrim
PatKitDef(\rim).asPattern(Pbind(
	\kitIndex, 5,
	\isRest, Pseq([
		0,0,0,0, 1,0,0,0,
	],inf).coin.not,
	\sustain, 0.1,
	\gain, 0.2,
	\dur, 1/8,
)),
endsnippet

snippet pout
Pbind(\out, BusDef(\\${1:fx1}, \audio)) <>$2
endsnippet

snippet \out
\out, BusDef(\\${1:sendbus1}, \audio),$2
endsnippet

snippet \inbus
\inbus, BusDef(\\${1:sendbus1}, \audio),$2
endsnippet

snippet \note
\note, Pseq([
	${1:0},
],inf),
endsnippet

snippet \adsr
\adsr, Pseq([
	[ Env.adsr(${1}0.1,0.1,0.8,0.1) ],
],inf),
endsnippet

snippet fxreverb
Pmono(\fx_reverb,
	\inbus, BusDef(\sendbus1),
	\lpf, 16000,
	\lpmix, 0.5,
	\decay, 3,
	\delayfac, 1,
	\mix, 1,
	\gain, 1,
	\dur, 1,
),
endsnippet

snippet fxfreeverb
Pmono(\fx_freeverb2,
	\addAction, \addToTail,
	\lag, 0.0005,
	\inbus, BusDef(\rev1, \audio),
	\verbmix, 0.4,
	\room, 0.5,
	\damp, 0.7,
	\mix, 1,
	\gain, 1,
	\dur, 2,
),
endsnippet

snippet fxcomp
Pmono(\simplecomp,
	\inbus, BusDef(\comp, \audio),
	\cpt, 0.01,
	\pregain, 1,
	\cpabove, 0.01,
	\cpbelow, 1,
	\cpclamp, 0.01,
	\cprelax, 0.1,
	\gain, 1,
	\dur, 1,
),
endsnippet

snippet fxchorus
Pmono(\fx_chorus,
	\inbus, BusDef(\fxchorus, \audio),
	\addAction, \addToTail,
	\lag, 0.0006,
	\mix, 1/2,
	\fb, 0.9,
	\delay, 0.1,
	\diff, 0.001,
	\modfreq, 0.1,
	\modamp, 1,
	\gain,2,
	\dur, 1,
	\amp, 0.1,
),
endsnippet

snippet fxstutter
Pmono(\fx_stutter,
	\inbus, BusDef(\sendbus2, \audio),
	\addAction, \addToTail,
	\lag, 0.0005,
	\mix, Pseq([
		//0,0,0,0, 0,0,1,0,
		//0,1,0,0, 0,0,0,0,
		0
	],inf),
	\rate, 1,
	\time, Pstep(Pseq([1/4,1/8,1/4],inf),1/4)/~t,
	\time, 1/16/~t,
	\dur, Pser([1/8],inf),
	\amp, 0.1,
),
endsnippet

snippet fxchorusdist
Pmono(\chorusdist,
	\inbus, BusDef(\\${1:sendbus1}, \audio, 2),
	\freq, 200,
	\distamp, 20,
	\distpostamp, 1/1,
	\fb, 0.404,
	\distmix, 1,
	\delay, 0.00111,
	\modfreq, 4*~t,
	\modamp, 0.0001,
	\hpf, 500,
	\gain, 0.4,
	\dur, 1,
	\amp, 0.1,
),
endsnippet

snippet fxcleandist
Pmono( \rdncleandist_fulllight,
	\inbus, BusDef(\\${1:sendbus1}, \audio, 2),
	\addAction, \addToTail,
	'mix', 0.15714285714286,
	'gain', 0.7344889782792,
	'fb', 0.0002099467303085,
	'delay', 0.000600001231 * Pseq([
		1,
	],inf).stutter(1),
	'delay2', 0.210000543560101,
	'distamp', 1.361836201538,
	'prelpf', 19900,
	'prehpf', 17,
	'lpf', 19900,
	'hpf', 17,
	'fbdistamp', 4.5388371966577,
	'fbdistmix', 0.98176470588235,
	'postlpf', 19900,
	'posthpf', 17,
	\bpmix, 0,
	'wetamp', 0.20503372119697,
	'indelay', 0.04,
	\dur, 1,
),$2
endsnippet

snippet rdnroom
Pmono(\rdnroom,
	\inbus, BusDef(\\${1:sendbus1}, \audio, 2),
	\dur, 1/8,
	'wet10', 1.0,
	'mix', 0.01,
	'gain', 2,
	'fb', 0.000000031,
	'delay', 0.00000001,
	'delay2', 0.00001001,
	'delay3', 0.2000080,
	'distamp', 0.604,
	'distamp2', 0.23,
	'distamp3', 0.89,
	'shift', -5.0,
	'shiftmix', 0.0,
	'stereo', 1.0,
	'indelay', 0.04,
),$2
endsnippet

#######################################################
###### Old

snippet Mdef
(
Mdef(\\${1:zed}, Pbind(
	\instrument, \\${2:default},
	\degree, Pseq([0],inf),
	\dur, 1,
	\amp, 0.1,
));
);
endsnippet

snippet ~class_ci
~class_ci_${1:zed} = (
	parent: ~class_instr,
	synth_rate: \ar,
	new: { arg self, main, player, namer;
		self = self.deepCopy;

		self.get_main = { main };
		self.get_player = { player };
		self.namer = { namer };
		self.synthdef_name = \ci_;
		self.build_data;

		self.simple_args = (gate:1, doneAction:2);
	
		self;
	},

	build_data: { arg self;
		var main = self.get_main;
		var player = self.get_player;
		var specs = self.get_specs;

		self.help_build_data(
			self.make_control_params([
				[\mix, \unipolar, 0.5],
			]),
			(

			),
			[
				//self.insertfxs,
			],
		);
	},

	make_layout: { arg self;
		self.layout = HLayout(
			StaticText.new.string_("void")
		);
		self.layout;
	},

	synthfun: { arg self;
		{ arg args;
			var i = self.get_synthargs(args);
			var sig;
			
			sig = SinOsc.ar(i.freq);
			sig = sig * EnvGen.ar(Env.adsr(0.01,0.1,0.8,0.1),i.gate,doneAction:i.doneAction);
			sig = Pan2.ar(sig, i.pan, i.amp);
			sig;
		}
	},

);
endsnippet

